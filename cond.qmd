---
title: "Conditional Probability"
author: "Charlie Wiebe"
date: "02/17/2025"

format: 
  html:  # You will quite likely want to change all but the last one, to taste
    theme: superhero  
    mainfont: monospace
    highlight-style: github
    title-block-banner: true
    embed-resources: true
---

**Abstract:**

This is a technical blog post of **both** an HTML file *and* [.qmd file](https://raw.githubusercontent.com/cd-public/D505/refs/heads/master/hws/src/cond.qmd) hosted on GitHub pages.

# 0. Quarto Type-setting

- This document is rendered with Quarto, and configured to embed an images using the `embed-resources` option in the header.
- If you wish to use a similar header, here's is the format specification for this document:

```email
format: 
  html:
    embed-resources: true
```

# 1. Setup

**Step Up Code:**

```{r}
sh <- suppressPackageStartupMessages
sh(library(tidyverse))
sh(library(caret))
wine <- readRDS(gzcon(url("https://github.com/cd-public/D505/raw/master/dat/pinot.rds")))
```

# 2. Conditional Probability

Calculate the probability that a Pinot comes from Burgundy given it has the word 'fruit' in the description.

$$
P({\rm Burgundy}~|~{\rm Fruit})
$$

```{r}
wino <- wine %>% 
  mutate(fruit = str_detect(description,"fruit"))

burgundy_fruit <- nrow(filter(wino, province=="Burgundy" & fruit))/nrow(wino)
fruit <- nrow(filter(wino, fruit))/nrow(wino)
burgundy_fruit/fruit
```

# 3. Naive Bayes Algorithm

We train a naive bayes algorithm to classify a wine's province using:
1. An 80-20 train-test split.
2. Three features engineered from the description
3. 5-fold cross validation.

We report Kappa after using the model to predict provinces in the holdout sample.

```{r}
wino <- wine %>% 
  mutate(fruit = str_detect(description,"fruit")) %>%
  mutate(cherry = str_detect(description,"cherry")) %>%
  mutate(chocolate = str_detect(description,"chocolate"))

wino <- wino[, c("province", "fruit", "cherry", "chocolate")]

set.seed(505)
wine_index <- createDataPartition(wino$province, p = 0.80, list = FALSE)
train <- wino[ wine_index, ]
test <- wino[-wine_index, ]

fit <- train(province ~ .,
             data = train, 
             method = "naive_bayes",
             metric = "Kappa",
             trControl = trainControl(method = "cv", number = 5))
fit
```


# 4. Frequency Differences

We find the three words that most distinguish New York Pinots from all other Pinots.

```{r}
library(tidytext)
library(dplyr)

pinot_wines <- wine %>%
  filter(str_detect(description, regex("Pinot", ignore_case = TRUE)))

pinot_wines <- pinot_wines %>%
  mutate(region = ifelse(province == "New_York", "New York", "Other"))

word_counts <- pinot_wines %>%
  unnest_tokens(word, description) %>%
  anti_join(stop_words, by = "word") %>%
  count(region, word, sort = TRUE)

word_tfidf <- word_counts %>%
  bind_tf_idf(word, region, n) %>%
  arrange(desc(tf_idf))

top_words <- word_tfidf %>%
  filter(region == "New York") %>%
  slice_max(tf_idf, n = 3)

print(top_words)
```